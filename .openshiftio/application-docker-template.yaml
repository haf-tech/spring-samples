apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: master-spring-docker-template
  annotations:
    description: "Template to create Spring application form a Docker Registry."
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: "Deployment configuration"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APP_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: "docker-registry.default.svc:5000/${PROJECT_NAME}/${APP_NAME}:latest"
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: ${APP_HTTP_PORT}
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources:
            limits:
              memory: 230Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: "${APP_NAME}:latest"
          namespace: ${PROJECT_NAME}
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: "Build configuration with Docker strategy"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: "${APP_NAME}:latest"
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: ${APP_NAME}
      git:
        uri: ${SOURCE_REPOSITORY_URL}
        ref: ${SOURCE_REF}
      sourceSecret:
        name: cd-github
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_ARGS_APPEND
          value: --also-make
        - name: MODULE_DIR
          value: ${SOURCE_SUB_MODULE_DIR}
        - name: ARTIFACT_DIR
          value: target
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.2
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
    - generic:
        secret: "${WEBHOOK_GENERIC_SECRET}"
      type: Generic
    - github:
        secret: "${WEBHOOK_GITHUB_SECRET}"
      type: GitHub
  status:
    lastVersion: 0
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: "Image Stream"
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: "docker-registry.default.svc:5000/${PROJECT_NAME}/${APP_NAME}:latest"
      generation: null
      importPolicy: {}
      name: latest
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
      description: "Route configuration"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: "Service configuration"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      # This does currently not work, see https://github.com/kubernetes-client/java/pull/242
      #targetPort: ${APP_HTTP_PORT}
      targetPort: 9021
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

parameters:
- name: PROJECT_NAME
  description: Project name or namespace.
  value: prj
  required: true
- name: APP_NAME
  description: Application name, used for labels and docker registry.
  value: spring-samples
  required: true
- name: SOURCE_REPOSITORY_URL
  description: Git Source Repository
  required: true
- name: SOURCE_REF
  description: Git Source reference/branch
  value: master
  required: true
- name: SOURCE_SUB_MODULE_DIR
  description: Sub module name
  value: .
  required: true
- name: APP_HTTP_PORT
  description: HTTP port which should be exposed
  value: "8080"
  required: false
- name: WEBHOOK_GITHUB_SECRET
  description: Secret for the GitHub WebHook
  value: "0000000001"
  required: false
- name: WEBHOOK_GENERIC_SECRET
  description: Secret for a Generic WebHook
  value: "0000000002"
  required: false
